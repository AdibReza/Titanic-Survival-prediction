# -*- coding: utf-8 -*-
"""Titanic Survival prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J-kuXuodeCpxEAtAjK7L6AMqmjszPfyh
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB

from sklearn.metrics import accuracy_score

titanic_data = pd.read_csv('/content/drive/MyDrive/ML datasets/Titanic survival prediction/train.csv')
titanic_data.head()

titanic_data.shape

titanic_data['Cabin'].value_counts()

titanic_data = titanic_data.drop('Cabin', axis = 1)

titanic_data.replace({'Sex':{'male':0, 'female':1}, 'Embarked':{'S':0, 'C':1, 'Q':2}}, inplace = True)



titanic_data.info()

"""# Label encoding time"""

# encoder = LabelEncoder()

# titanic_data['Cabin'] = encoder.fit_transform(titanic_data['Cabin'])

titanic_data.head()

"""## Handling Missing Values"""

titanic_data.isnull().sum()

titanic_data['Age'].mean()

titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace = True)
titanic_data.dropna(inplace = True)
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode(), inplace = True)

titanic_data.isnull().sum()

titanic_data.shape

"""## Data defining part"""

titanic_data.head()

x = titanic_data.drop(columns = ['PassengerId', 'Survived','Ticket', 'Name'], axis = 1)
y = titanic_data['Survived']

print(y.shape)

titanic_data['Survived'].value_counts()

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 2 )

print(x.shape, x_train.shape, x_test.shape)

"""## Model training"""

model = LogisticRegression()

model.fit(x_train, y_train)

x_train_prediction = model.predict(x_train)
prediction = accuracy_score(x_train_prediction, y_train)
print(prediction)

x_test_prediction = model.predict(x_test)
prediction = accuracy_score(x_test_prediction, y_test)
print(prediction)

"""## Model selection"""

models = [LogisticRegression(max_iter = 1500), KNeighborsClassifier(), RandomForestClassifier(), SVC(kernel = 'linear'), GaussianNB()]

for model in models:
  model.fit(x_train, y_train)
  x_train_prediction = model.predict(x_train)
  prediction = accuracy_score(x_train_prediction, y_train)
  print(model,'=', prediction)

